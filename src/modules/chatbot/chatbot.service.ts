/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import { Injectable } from '@nestjs/common';
import {
  GoogleGenerativeAI,
  FunctionDeclaration,
  SchemaType,
  FunctionCallingMode,
} from '@google/generative-ai';
import { ConfigService } from '@nestjs/config';
import { HttpService } from '@nestjs/axios';
import { firstValueFrom } from 'rxjs';

@Injectable()
export class ChatbotService {
  private genAI: GoogleGenerativeAI;
  private model: any;

  constructor(
    private configService: ConfigService,
    private httpService: HttpService,
  ) {
    this.initializeGemini();
  }

  private initializeGemini() {
    const apiKey = this.configService.get<string>('GEMINI_API_KEY');
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY is not configured');
    }

    this.genAI = new GoogleGenerativeAI(apiKey);

    const searchPropertiesFunction: FunctionDeclaration = {
      name: 'search_properties',
      description:
        'T√¨m ki·∫øm v√† l·ªçc b·∫•t ƒë·ªông s·∫£n theo ti√™u ch√≠ c·ªßa ng∆∞·ªùi d√πng, tr·∫£ v·ªÅ danh s√°ch k·∫øt qu·∫£ k√®m URL ƒë·ªÉ truy c·∫≠p',
      parameters: {
        type: SchemaType.OBJECT,
        properties: {
          q: {
            type: SchemaType.STRING,
            description:
              'Khu v·ª±c, ch·ªó ·ªü, t·ª´ kh√≥a t√¨m ki·∫øm, qu·∫≠n ho·∫∑c th√†nh ph·ªë',
          },
          type: {
            type: SchemaType.STRING,
            description:
              'Lo·∫°i b·∫•t ƒë·ªông s·∫£n: HOUSING (nh√† ri√™ng), APARTMENT (chung c∆∞), BOARDING (nh√† tr·ªç)',
          },
          fromPrice: {
            type: SchemaType.NUMBER,
            description: 'Gi√° t·ªëi thi·ªÉu (VND)',
          },
          toPrice: {
            type: SchemaType.NUMBER,
            description: 'Gi√° t·ªëi ƒëa (VND)',
          },
          minArea: {
            type: SchemaType.NUMBER,
            description: 'Di·ªán t√≠ch t·ªëi thi·ªÉu (m¬≤)',
          },
          maxArea: {
            type: SchemaType.NUMBER,
            description: 'Di·ªán t√≠ch t·ªëi ƒëa (m¬≤)',
          },
          bedrooms: {
            type: SchemaType.NUMBER,
            description: 'S·ªë ph√≤ng ng·ªß',
          },
          bathrooms: {
            type: SchemaType.NUMBER,
            description: 'S·ªë ph√≤ng t·∫Øm',
          },
          sortBy: {
            type: SchemaType.STRING,
            description:
              'S·∫Øp x·∫øp theo: price (gi√°), area (di·ªán t√≠ch), createdAt (ng√†y t·∫°o)',
          },
          sortOrder: {
            type: SchemaType.STRING,
            description: 'Th·ª© t·ª± s·∫Øp x·∫øp: ASC (tƒÉng d·∫ßn), DESC (gi·∫£m d·∫ßn)',
          },
          limit: {
            type: SchemaType.NUMBER,
            description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa (m·∫∑c ƒë·ªãnh: 10)',
          },
        },
        required: [],
      },
    };

    // Kh·ªüi t·∫°o model v·ªõi tool
    this.model = this.genAI.getGenerativeModel({
      model: 'gemini-2.5-flash',
      tools: [
        {
          functionDeclarations: [searchPropertiesFunction],
        },
      ],
      toolConfig: {
        functionCallingConfig: {
          mode: FunctionCallingMode.AUTO,
        },
      },
    });
  }

  /**
   * X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi t·ª´ Gemini
   */
  async processMessage(message: string): Promise<string> {
    try {
      const chat = this.model.startChat({
        history: [
          {
            role: 'user',
            parts: [
              {
                text: `B·∫°n l√† tr·ª£ l√Ω t∆∞ v·∫•n b·∫•t ƒë·ªông s·∫£n. Khi ng∆∞·ªùi d√πng nh·∫Øc ƒë·∫øn T√åM KI·∫æM/THU√ä/MUA b·∫•t ƒë·ªông s·∫£n, b·∫°n PH·∫¢I g·ªçi function search_properties.
                C√°c t·ª´ kh√≥a c·∫ßn ch√∫ √Ω: t√¨m, thu√™, mua, nh√† tr·ªç, chung c∆∞, nh√† ri√™ng, apartment, boarding, housing.
                V√ç D·ª§:
                - "t√¨m nh√† tr·ªç 3-5 tri·ªáu" ‚Üí g·ªçi search_properties v·ªõi propertyType="BOARDING", minPrice=3000000, maxPrice=5000000
                - "thu√™ chung c∆∞ 2 ph√≤ng ng·ªß" ‚Üí g·ªçi search_properties v·ªõi propertyType="APARTMENT", bedrooms=2
                H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† th√¢n thi·ªán.`,
              },
            ],
          },
          {
            role: 'model',
            parts: [
              {
                text: 'T√¥i hi·ªÉu! T√¥i s·∫Ω gi√∫p b·∫°n t√¨m ki·∫øm b·∫•t ƒë·ªông s·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng function search_properties m·ªói khi b·∫°n c√≥ y√™u c·∫ßu t√¨m ki·∫øm.',
              },
            ],
          },
        ],
      });

      const result = await chat.sendMessage(message);
      const response = result.response;

      // Debug logging
      console.log('üîç Gemini Response Debug:');
      console.log('- Message:', message);

      // Truy c·∫≠p function calls ƒë√∫ng c√°ch t·ª´ candidates
      const candidates = (response as any).candidates;
      let functionCall = null;

      if (candidates && candidates.length > 0) {
        const parts = candidates[0].content?.parts;
        if (parts && parts.length > 0) {
          for (const part of parts) {
            if (part.functionCall) {
              functionCall = part.functionCall;
              break;
            }
          }
        }
      }

      console.log('- Has functionCall:', !!functionCall);
      if (functionCall) {
        console.log('- FunctionCall name:', (functionCall as any).name);
        console.log(
          '- FunctionCall args:',
          JSON.stringify((functionCall as any).args, null, 2),
        );
      }

      // X·ª≠ l√Ω function calls n·∫øu c√≥
      if (functionCall && (functionCall as any).name === 'search_properties') {
        console.log(
          'üîç Calling search_properties with args:',
          (functionCall as any).args,
        );

        // G·ªçi API search properties
        const searchResults = await this.searchProperties(
          (functionCall as any).args,
        );

        console.log(
          'üîç Search results:',
          JSON.stringify(searchResults, null, 2),
        );

        // G·ª≠i k·∫øt qu·∫£ l·∫°i cho model ƒë·ªÉ t·∫°o ph·∫£n h·ªìi
        const functionResponse = {
          functionResponse: {
            name: 'search_properties',
            response: {
              content: searchResults,
            },
          },
        };

        const finalResult = await chat.sendMessage([functionResponse]);
        const finalResponse = finalResult.response.text();
        console.log('üîç Final response:', finalResponse);
        return finalResponse;
      }

      return response.text();
    } catch (error) {
      console.error('Error processing message:', error);
      return 'Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.';
    }
  }

  /**
   * G·ªçi API search properties
   */
  private async searchProperties(params: any): Promise<any> {
    try {
      const backendUrl = 'http://localhost:3000'; // URL c·ªßa backend hi·ªán t·∫°i
      const apiUrl = `${backendUrl}/properties/filter-with-url`;

      // Map parameters t·ª´ Gemini sang API format
      const mappedParams: any = {};

      // Map gi√°
      if (params.fromPrice) mappedParams.fromPrice = params.fromPrice;
      if (params.minPrice) mappedParams.fromPrice = params.minPrice;
      if (params.toPrice) mappedParams.toPrice = params.toPrice;
      if (params.maxPrice) mappedParams.toPrice = params.maxPrice;

      // Map lo·∫°i b·∫•t ƒë·ªông s·∫£n
      if (params.type) mappedParams.type = params.type;
      if (params.propertyType) mappedParams.type = params.propertyType;

      // Map di·ªán t√≠ch
      if (params.fromArea || params.minArea)
        mappedParams.fromArea = params.fromArea || params.minArea;
      if (params.toArea || params.maxArea)
        mappedParams.toArea = params.toArea || params.maxArea;

      // Map c√°c thu·ªôc t√≠nh kh√°c
      if (params.bedrooms) mappedParams.bedrooms = params.bedrooms;
      if (params.bathrooms) mappedParams.bathrooms = params.bathrooms;
      if (params.q) mappedParams.q = params.q;
      if (params.limit) mappedParams.limit = params.limit;
      if (params.sortBy) mappedParams.sortBy = params.sortBy;
      if (params.sortOrder) mappedParams.sortOrder = params.sortOrder;

      // Lo·∫°i b·ªè c√°c tham s·ªë undefined/null
      const cleanParams = Object.fromEntries(
        Object.entries(mappedParams).filter(
          ([_, value]) => value !== undefined && value !== null,
        ),
      );

      console.log('üîç API Call params:', cleanParams);

      const response = await firstValueFrom(
        this.httpService.get(apiUrl, {
          params: cleanParams,
        }),
      );

      return response.data;
    } catch (error) {
      console.error('Error calling search properties API:', error);
      return {
        statusCode: 500,
        message: 'L·ªói khi t√¨m ki·∫øm b·∫•t ƒë·ªông s·∫£n',
        data: {
          data: [],
          total: 0,
          message: 'Kh√¥ng th·ªÉ t√¨m ki·∫øm b·∫•t ƒë·ªông s·∫£n l√∫c n√†y',
        },
      };
    }
  }

  /**
   * Kh·ªüi t·∫°o l·∫°i cu·ªôc tr√≤ chuy·ªán
   */
  resetChat(): string {
    return 'Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o l·∫°i. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?';
  }
}
