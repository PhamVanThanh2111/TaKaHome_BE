import {
  MigrationInterface,
  QueryRunner,
  Table,
  TableForeignKey,
} from 'typeorm';

// ƒê·ªïi t√™n class sao cho ph√π h·ª£p v·ªõi th·ªùi gian hi·ªán t·∫°i ho·∫∑c m·ª•c ƒë√≠ch
// V√≠ d·ª•: RemoveMessageTable + [timestamp]
export class RemoveMessageTable1760963200001
  implements MigrationInterface
{
  // T√™n b·∫£ng c·∫ßn x√≥a
  private readonly TABLE_NAME = 'message';

  // T√™n c√°c Foreign Key (ƒê·ªÉ ph·ª•c v·ª• cho rollback)
  // L·∫•y t·ª´ ·∫£nh: senderId, receiverId, propertyId
  private readonly SENDER_FK_NAME = 'FK_message_senderId_to_user';
  private readonly RECEIVER_FK_NAME = 'FK_message_receiverId_to_user';
  private readonly PROPERTY_FK_NAME = 'FK_message_propertyId_to_property';

  /**
   * Ph∆∞∆°ng th·ª©c UP: X√≥a b·∫£ng (DROP TABLE)
   */
  public async up(queryRunner: QueryRunner): Promise<void> {
    // L·ªánh DROP TABLE s·∫Ω x√≥a b·∫£ng message
    await queryRunner.dropTable(this.TABLE_NAME);
    console.log(`‚úÖ Table '${this.TABLE_NAME}' has been dropped successfully.`);
  }

  /**
   * Ph∆∞∆°ng th·ª©c DOWN: T·∫°o l·∫°i b·∫£ng (CREATE TABLE) ƒë·ªÉ rollback
   */
  public async down(queryRunner: QueryRunner): Promise<void> {
    // 1. T·∫°o l·∫°i b·∫£ng message
    await queryRunner.createTable(
      new Table({
        name: this.TABLE_NAME,
        columns: [
          {
            name: 'id',
            type: 'uuid',
            isPrimary: true,
            isGenerated: false,
            default: 'uuid_generate_v4()', // Theo ·∫£nh
          },
          {
            name: 'content',
            type: 'text', // Theo ·∫£nh
            isNullable: false,
          },
          {
            name: 'createdAt',
            type: 'timestamp', // Theo ·∫£nh
            isNullable: false,
            default: 'now()', // Theo ·∫£nh
          },
          {
            name: 'senderId',
            type: 'uuid', // Theo ·∫£nh
            isNullable: false, // Gi·∫£ ƒë·ªãnh l√† b·∫Øt bu·ªôc, kh√¥ng c√≥ trong ·∫£nh nh∆∞ng sender ph·∫£i c√≥
          },
          {
            name: 'receiverId',
            type: 'uuid', // Theo ·∫£nh
            isNullable: false, // Gi·∫£ ƒë·ªãnh l√† b·∫Øt bu·ªôc, kh√¥ng c√≥ trong ·∫£nh nh∆∞ng receiver ph·∫£i c√≥
          },
          {
            name: 'propertyId',
            type: 'uuid', // Theo ·∫£nh
            isNullable: true, // Theo ·∫£nh
          },
        ],
      }),
      true,
    );

    // 2. T·∫°o l·∫°i c√°c Foreign Key
    // senderId
    await queryRunner.createForeignKey(
      this.TABLE_NAME,
      new TableForeignKey({
        columnNames: ['senderId'],
        referencedColumnNames: ['id'],
        referencedTableName: 'user',
        onDelete: 'NO ACTION',
        onUpdate: 'NO ACTION',
        name: this.SENDER_FK_NAME,
      }),
    );

    // receiverId
    await queryRunner.createForeignKey(
      this.TABLE_NAME,
      new TableForeignKey({
        columnNames: ['receiverId'],
        referencedColumnNames: ['id'],
        referencedTableName: 'user',
        onDelete: 'NO ACTION',
        onUpdate: 'NO ACTION',
        name: this.RECEIVER_FK_NAME,
      }),
    );

    // propertyId (c√≥ th·ªÉ NULL)
    await queryRunner.createForeignKey(
      this.TABLE_NAME,
      new TableForeignKey({
        columnNames: ['propertyId'],
        referencedColumnNames: ['id'],
        referencedTableName: 'property',
        onDelete: 'NO ACTION',
        onUpdate: 'NO ACTION',
        name: this.PROPERTY_FK_NAME,
      }),
    );

    console.log(
      `üîÑ Table '${this.TABLE_NAME}' has been recreated for rollback.`,
    );
  }
}